//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the new-transaction.component.tns.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Injector, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import {
    KSFormComponent,
    FormControlOptions,
    getDefaultValidationMessages,
    getDefaultControlOptions
} from '@src/app/shared/components/mobile-form/form.component';
import { Page } from 'tns-core-modules/ui/page';
import { GestureTypes, SwipeDirection, SwipeGestureEventData } from 'tns-core-modules/ui/gestures';
import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';

import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory } from '@src/app/core/data/data-service.factory';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { EntityDataService } from '@src/app/core/data/entity-data.service';
import { Transaction } from '@src/app/data/transaction.model';
import { getTransactionConfig } from '@src/app/data/transaction.config';

@Component({
    templateUrl: './new-transaction.component.html',
    styleUrls: ['./new-transaction.component.css']
})
export class NewTransactionViewBaseComponent implements OnInit {
    public $config = {
        mobileform0: {
            validationMessages: getDefaultValidationMessages(),
            groups: {
                transactionFormGroup: {
                    type: getDefaultControlOptions(),
                    amount: getDefaultControlOptions(),
                    accountId: getDefaultControlOptions()
                }
            }
        }
    };

    public $transactionService: EntityDataService<Transaction>;

    protected $activatedRoute: ActivatedRoute;
    protected $navigationService: NavigationService;
    protected $utilsService: UtilsService;
    protected $serviceFactory: DataServiceFactory;
    protected $page: Page;

    public $formBuilder: FormBuilder;
    public $transactionFormGroup: FormGroup;

    constructor(public injector: Injector) {
        this.$page = injector.get(Page);

        this.$formBuilder = injector.get(FormBuilder);
        this.$activatedRoute = injector.get(ActivatedRoute);
        this.$navigationService = injector.get(NavigationService);
        this.$utilsService = injector.get(UtilsService);
        this.$serviceFactory = injector.get(DataServiceFactory);

        const dataConfig = {
            transaction: getTransactionConfig()
        };

        this.initDataServices(dataConfig);

        this.$page.enableSwipeBackNavigation = false;
    }

    ngOnInit() {
        this.initFormGroups();
    }

    onViewLoaded({ object: view }) {
        if (view.swipeBound) {
            return;
        }

        const swipeHandler = ({ direction }: SwipeGestureEventData) => {
            if (direction === SwipeDirection.right) {
                this.$navigationService.goBack(this.$activatedRoute);
                return;
            }
        };

        view.on(GestureTypes.swipe, swipeHandler);
        view.swipeBound = true;
    }

    protected initDataServices(dataConfig: { [key: string]: KinveyServiceConfig }) {
        this.$transactionService = this.$serviceFactory.entity<Transaction>({ config: dataConfig.transaction, typeName: Transaction.name });
        this.$transactionService.dataState.onChanges(this.$transactionService.mapParams(this.$activatedRoute.queryParams));
    }

    protected initFormGroups() {
        let type: FormControlOptions;
        let amount: FormControlOptions;
        let accountId: FormControlOptions;

        ({ type, amount, accountId } = this.$config.mobileform0.groups.transactionFormGroup);

        this.$transactionFormGroup = this.$formBuilder.group({
            type: [type.initial, type],
            amount: [amount.initial, amount],
            accountId: [accountId.initial, accountId]
        });
    }
}
