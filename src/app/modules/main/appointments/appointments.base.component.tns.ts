//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the appointments.component.tns.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Injector } from '@angular/core';
import { Page } from 'tns-core-modules/ui/page';
import { GestureTypes, SwipeDirection, SwipeGestureEventData } from 'tns-core-modules/ui/gestures';
import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';

import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory } from '@src/app/core/data/data-service.factory';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { CollectionDataService } from '@src/app/core/data/collection-data.service';
import { CollectionState } from '@src/app/core/data/state/collection-state.interface';
import { Appointment } from '@src/app/data/appointment.model';
import { getAppointmentConfig } from '@src/app/data/appointment.config';

@Component({
    templateUrl: './appointments.component.html',
    styleUrls: ['./appointments.component.css']
})
export class AppointmentsViewBaseComponent {
    public $config = {
        mobilelistviewcomponent0: {
            navigateOnItemTap: {
                allowBackNavigation: false
            }
        },
        mobilebutton0: {
            navigateTo: {
                allowBackNavigation: false,
                module: 'main',
                parameter: '',
                view: 'new-appointment'
            }
        }
    };

    public $appointmentsService: CollectionDataService<Appointment>;

    protected $activatedRoute: ActivatedRoute;
    protected $navigationService: NavigationService;
    protected $utilsService: UtilsService;
    protected $serviceFactory: DataServiceFactory;
    protected $page: Page;

    constructor(public injector: Injector) {
        this.$page = injector.get(Page);
        this.$activatedRoute = injector.get(ActivatedRoute);
        this.$navigationService = injector.get(NavigationService);
        this.$utilsService = injector.get(UtilsService);
        this.$serviceFactory = injector.get(DataServiceFactory);

        const dataConfig = {
            appointments: getAppointmentConfig()
        };

        this.initDataServices(dataConfig);

        this.$page.enableSwipeBackNavigation = false;
    }

    onViewLoaded({ object: view }) {
        if (view.swipeBound) {
            return;
        }

        const swipeHandler = ({ direction }: SwipeGestureEventData) => {
            if (direction === SwipeDirection.right) {
                this.$navigationService.goBack(this.$activatedRoute);
                return;
            }
        };

        view.on(GestureTypes.swipe, swipeHandler);
        view.swipeBound = true;
    }

    protected initDataServices(dataConfig: { [key: string]: KinveyServiceConfig }) {
        this.$appointmentsService = this.$serviceFactory.collection<Appointment>({
            config: dataConfig.appointments,
            initialState: {
                skip: 0,
                take: 20
            },
            typeName: Appointment.name
        });
    }
}
